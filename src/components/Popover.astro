---
import { Icon } from '@/icons'
import Tooltip from '@/components/Tooltip.astro'
import type { TTeam } from '@/types'

export interface Props {
  team: TTeam[]
}

const { team } = Astro.props
const { currentLocale } = Astro
const teamTranslation = currentLocale === 'es' ? 'Equipo' : 'Team'
const titleLabel =
  currentLocale === 'es' ? 'Miembros del equipo' : 'Team members'
---

<div class='relative size-6 popover-content'>
  <label
    class='popover-team relative group hover:text-cBlue order-1 text-cWhite transition-colors duration-150 ease-in size-6 cursor-pointer'
    aria-label='Team members'
  >
    <input type='checkbox' class='check-popover-team' />
    <Icon.users />
    <Tooltip content={titleLabel} />
  </label>

  <nav
    class='popover-team-options text-cWhite grid place-content-start absolute transform right-0 lg:left-auto mx-auto w-max p-2 rounded-md bg-cPaper shadow-2xl z-10'
  >
    <p class='font-bold text-cAccent'>{teamTranslation}</p>
    {
      team
        .sort((a, b) => a.username.localeCompare(b.username))
        .map(({ username, url, role }) => (
          <a
            class={`text-cWhite relative hover:text-cBlue rounded transition-colors duration-150 ease-in flex place-items-center gap-2 size-full z-10 group space-x-1 items-center hover:bg-cBlack px-4 py-2`}
            href={!url ? `https://github.com/${username}` : url}
            aria-label={`Member ${username}`}
            target='_blank'
          >
            @{username}
            <div class='size-3 inline-block text-cAccent transition-all duration-150 ease-in group-hover:-translate-y-[1px] group-hover:translate-x-[1px] group-hover:text-cBlue'>
              <Icon.arrowtr />
            </div>
            <Tooltip content={role} />
          </a>
        ))
    }
  </nav>
</div>

<style>
  .check-popover-team {
    display: none;
  }

  .popover-team-options {
    opacity: 0;
    visibility: hidden;
    transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  :has(.check-popover-team:checked) .popover-team-options {
    animation: slide linear both;
    visibility: visible;
    @apply translate-y-[5px] opacity-100;
  }

  :has(.check-popover-team:checked) .popover-team {
    @apply text-cBlue;
  }

  @keyframes colorActive {
    to {
      @apply stroke-cBlue;
    }
  }
</style>

<script>
  const $langBtns = document.querySelectorAll(
    '.popover-team'
  ) as NodeListOf<HTMLElement>
  const $langCheckboxs = document.querySelectorAll(
    '.check-popover-team'
  ) as NodeListOf<HTMLInputElement>

  const handleClickOutside = (e: MouseEvent, checkbox: HTMLInputElement) => {
    const target = e.target as HTMLElement
    // If the click is not inside the popovers, close the popover
    if (target && !Array.from($langBtns).some((btn) => btn.contains(target))) {
      checkbox.checked = false
      document.body.removeEventListener('click', (event) =>
        handleClickOutside(event, checkbox)
      )
    }
  }

  $langBtns.forEach(($langBtn, index) => {
    const $langCheckbox = $langCheckboxs[index]

    $langBtn.addEventListener('click', (e) => {
      e.stopPropagation()

      // Close any other popover before opening the current one
      $langCheckboxs.forEach((checkbox) => {
        if (checkbox !== $langCheckbox) {
          checkbox.checked = false // Cierra los demÃ¡s popovers
        }
      })

      if ($langCheckbox.checked) {
        // Add the click outside event only if the checkbox is checked
        document.body.addEventListener('click', (event) =>
          handleClickOutside(event, $langCheckbox)
        )
      }
    })
  })
</script>
