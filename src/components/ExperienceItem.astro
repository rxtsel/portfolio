---
import { calculateDuration } from '@/utils'
import { getLangFromUrl, useTranslations } from '@/i18n/utils'
import type { TWorkEntry } from '@/types'
import ArrowIcon from '@/icons/simple/arrow-tr.svg'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

export interface Props {
  data: TWorkEntry
}

const { data } = Astro.props
const { company, location, remote } = data

let startDate: Date
let endDate: Date | undefined = undefined

const jobs = data.jobs
if (jobs.length > 0) {
  startDate = new Date(Math.min(...jobs.map((job) => job.startDate.getTime())))
  const hasEndDate = jobs.every((job) => job.endDate !== undefined)
  if (hasEndDate) {
    const endDates = jobs.map((job) => job.endDate!)
    endDate = new Date(Math.max(...endDates.map((d) => d.getTime())))
  } else {
    endDate = undefined
  }
}
const initialDuration = calculateDuration({
  startDate: startDate!,
  endDate,
  locale: lang
})
---

<li class='mb-10 ms-4'>
  <span
    class='absolute block w-3 h-3 rounded-full mt-1.5 -start-1.5 border border-cBlue bg-cBlue'
    aria-hidden='true'></span>

  <time
    class='text-sm font-normal leading-none dark:text-cAccent text-neutral-600 capitalize ts-duration'
    data-start={startDate!.toISOString()}
    data-end={endDate ? endDate.toISOString() : ''}
    data-locale={lang}
    datetime={(endDate ?? new Date()).toISOString()}
  >
    {initialDuration}
  </time>

  <span
    class='text-sm mt-1 block font-normal leading-none dark:text-cAccent text-neutral-600 capitalize'
  >
    {location}
    {remote && `Â· ${t('single.remote')}`}
  </span>

  {
    data.companyUrl ? (
      <a
        href={data.companyUrl}
        target='_blank'
        rel='noopener noreferrer'
        aria-label={company}
        class='text-xl w-fit font-semibold hover:text-cBlue transition-all duration-150 ease-in dark:text-white mt-2 capitalize group flex items-center gap-[6px]'
      >
        {company}
        <span class='size-3 inline-block dark:text-cAccent text-neutral-600 transition-all duration-150 ease-in group-hover:-translate-y-[1px] group-hover:translate-x-[1px] group-hover:text-cBlue'>
          <ArrowIcon />
        </span>
      </a>
    ) : (
      <h3 class='text-xl font-semibold dark:text-white mt-2 capitalize'>
        {company}
      </h3>
    )
  }

  {
    data.jobs.map((job) => {
      const initialJobDuration = calculateDuration({
        startDate: job.startDate,
        endDate: job.endDate,
        locale: lang
      })
      return (
        <div class='first-of-type:mt-0 mt-5'>
          <h3 class='dark:text-cAccent text-neutral-600 font-bold mt-2 capitalize'>
            {job.role}
          </h3>
          {data.jobs.length > 1 && (
            <time
              class='text-sm font-normal leading-none dark:text-cAccent text-neutral-600 capitalize js-duration'
              data-start={job.startDate.toISOString()}
              data-end={job.endDate ? job.endDate.toISOString() : ''}
              data-locale={lang}
            >
              {initialJobDuration}
            </time>
          )}
          {job.description && (
            <p class='my-3 text-base font-normal dark:text-cAccent text-neutral-600 text-pretty'>
              {job.description}
            </p>
          )}
        </div>
      )
    })
  }
</li>

<script src='../utils/update-durations.ts'></script>
