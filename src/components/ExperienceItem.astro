---
import { calculateDuration } from '@/utils'
import { getLangFromUrl, useTranslations } from '@/i18n/utils'
import type { TWorkEntry } from '@/types'
import { Icon } from '@/icons'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

export interface Props {
  data: TWorkEntry
}

const { data } = Astro.props

const { company, location, remote } = data

let startDate: Date
let endDate: Date | undefined = undefined

// Verify if there are jobs or if it is an individual job
const jobs = data.jobs

if (jobs.length > 0) {
  startDate = new Date(Math.min(...jobs.map((job) => job.startDate.getTime())))

  const hasEndDate = jobs.every((job) => job.endDate !== undefined)

  if (hasEndDate) {
    // If all jobs have endDate, get the most recent
    const endDates = jobs.map((job) => job.endDate!)
    endDate = new Date(Math.max(...endDates.map((date) => date.getTime())))
  } else {
    // If there is at least one job without endDate, return null
    endDate = undefined
  }
}

// Calcular duración
const duration = calculateDuration({
  startDate: startDate!,
  endDate: endDate,
  locale: lang
})
---

<li class='mb-10 ms-4'>
  <span
    class='absolute block w-3 h-3 rounded-full mt-1.5 -start-1.5 border border-cBlue bg-cBlue'
  ></span>

  <time class='text-sm font-normal leading-none text-cAccent capitalize'>
    {duration}
  </time>

  <span
    class='text-sm mt-1 block font-normal leading-none text-cAccent capitalize'
  >
    {location}
    {remote && `· ${t('single.remote')}`}
  </span>

  {
    data.companyUrl ? (
      <a
        href={data.companyUrl}
        target='_blank nofollow'
        aria-label={company}
        class='text-xl w-fit font-semibold hover:text-cBlue transition-all duration-150 ease-in text-white mt-2 capitalize group flex items-center gap-[6px]'
      >
        {company}
        <span class='size-3 inline-block text-cAccent transition-all duration-150 ease-in group-hover:-translate-y-[1px] group-hover:translate-x-[1px] group-hover:text-cBlue'>
          <Icon.arrowtr />
        </span>
      </a>
    ) : (
      <h3 class='text-xl font-semibold text-white mt-2 capitalize'>
        {company}
      </h3>
    )
  }

  {
    data.jobs.map((job) => (
      <div class='first-of-type:mt-0 mt-5'>
        <h4 class='text-cAccent font-bold mt-2 capitalize'>{job.role}</h4>
        {data.jobs.length > 1 && (
          <time class='text-sm font-normal leading-none text-cAccent capitalize'>
            {calculateDuration({
              startDate: job.startDate,
              endDate: job.endDate,
              locale: lang
            })}
          </time>
        )}
        {job.description && (
          <p class='my-3 text-base font-normal text-cAccent text-pretty'>
            {job.description}
          </p>
        )}
      </div>
    ))
  }
</li>
